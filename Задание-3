class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'  
        
    def __str__(self):
        return (f'Имя:{self.name}\n'
                f'Фамилия:{self.surname}\n'
                f'Средняя оценка за домашнее задание:{self.grade_average_for_homework()}\n'
                f'Курс в процессе изучения:{", ".join(self.courses_in_progress)}\n'
                f'Завершённые курсы:{", ".join(self.finished_courses)}' )  
        
    def grade_average_for_homework(self):
        average_grade = sum([sum(grades) for grades in self.grades.values()], 0)
        total_courses = sum([len(grades)for grades in self.grades.values()], 0)
        return average_grade / total_courses if total_courses > 0 else 0
        
    def __lt__(self, other):
        return self.grade_average_for_homework() < other.grade_average_for_homework()
           
    
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
        
    def __str__(self):
        return(f'Имя:{self.name}\n'
               f'Фамилия:{self.surname}\n'
               f'Средняя оценка за лекции:{self.average_rating}')
    def average_rating(self):
        total_grades = sum([sum(grades) for grades in self.grades.values()], 0)
        total_courses = sum([len(grades) for grades in self.grades.values()], 0)
        return total_grades / total_courses if total_courses > 0 else 0

    def __lt__(self, other):
        return self.average_rating() < other.average_rating()
    
            
class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        
    def __str__(self):
        return(f'Имя:{self.name}\n'
               f'Фамилия:{self.surname}'
               
        ) 
best_student = Student('Ruoy', 'Eman', 'your_gender')
best_student.courses_in_progress += ['Python']
 
cool_lector = Lecturer('Some', 'Buddy')
cool_lector.courses_attached += ['Python']

cool_lector.rate_hw(best_student, 'Python', 10)
cool_lector.rate_hw(best_student, 'Python', 10)
cool_lector.rate_hw(best_student, 'Python', 10)

best_student.rate_lecturer(cool_lector, 'Python', 9)
best_student.rate_lecturer(cool_lector, 'Python', 10)

print(best_student.grades)

